---
layout: page.ejs
title: Search
---

<link rel="stylesheet" href="/assets/styles/filters.css" />
<div id="root">
  <div
    id="root-loading-placeholder"
    style="
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 200px;
      border: 1px solid #f0f0f0;
    "
  >
    <img
      src="/assets/images/loading.gif"
      alt="loading"
      width="32"
      height="32"
    />
  </div>
</div>

<script type="text/javascript">
window.ICON_GALLERY = {
  "themeId": "<%- site.themeId %>",

  <%# Sort alphabetically %>
  "categoryIds": <%- JSON.stringify(Object
    .keys(site.categoriesById)
    .sort((id1, id2) => {
      const id1name = site.categoriesById[id1].toLowerCase();
      const id2name = site.categoriesById[id2].toLowerCase();
      if (id1name < id2name) {
        return -1;
      }
      if (id1name > id2name) {
        return 1;
      }
      return 0;
    })
  ) %>,
  "categoriesById": <%- JSON.stringify(site.categoriesById) %>,

  <%# Colors come in alphabetical order, so we don't have to do sorting %>  
  "colorIds": <%- JSON.stringify(Object.keys(site.colorsById).sort()) %>,
  "colorsById": <%- JSON.stringify(site.colorsById) %>,

  
  <%# For developers, we have to create our own array of IDs, then alphabetize
      them. Then we create an object mapping those IDs to the real value. %>
  "developerIds": <%- JSON.stringify(
    Array.from(
      new Set(site.icons.filter(icon => icon.developerId).map(icon => icon.developerId))
    ).sort()
  ) %>,
  "developersById": <%- JSON.stringify(
    site.icons.reduce((acc, icon) => {
      if (icon.developer && !acc[icon.developerId]) {
        return {
          ...acc,
          [icon.developerId]: icon.developer
        };
      } else {
        return acc;
      }
    }, {})
  ) %>,
  
  "designerIds": <%- JSON.stringify(
    Array.from(
      new Set(site.icons.filter(icon => icon.designerId).map(icon => icon.designerId))
    ).sort()
  ) %>,
  "designersById": <%- JSON.stringify(
    site.icons.reduce((acc, { designer, designerId }) => ({
      ...acc,
      ...(designer && !acc[designerId]
        ? { [designerId]: designer }
        : {})
    }), {})
  ) %>,

  "iconIds": <%-
    JSON.stringify(
      site.icons.map(icon => icon.id)
    )
  %>,
  "iconsById": <%-
    JSON.stringify(
      site.icons.reduce((acc, icon) => {
        const keys = [
          'developer',
          'developerId',
          'category',
          'categoryId',
          'colorId',
          'designer',
          'designerId',
          'id',
          'permalink',
          'title',
          'isPreIos7'
        ];

        return {
          ...acc,
          [icon.id]: keys.reduce((acc, key) => {
            return icon[key]
              ? { ...acc, [key]: icon[key] }
              : acc
          }, {})
        };
      }, {})
    )
  %>
}
</script>

<!-- Page deps -->
<script type="text/javascript" src="/assets/scripts/lib/react@16.4.1.<%- (__DEV__) ? 'development' : 'production.min' %>.js"></script>
<script type="text/javascript" src="/assets/scripts/lib/react-dom@16.4.1.<%- (__DEV__) ? 'development' : 'production.min' %>.js"></script>
<script type="text/javascript" src="/assets/scripts/lib/prop-types@15.6.2.min.js"></script>
<script type="text/javascript" src="/assets/scripts/lib/string_score@0.1.22.min.js"></script>

<!-- Browsers that support modules, you get a nice search functionality -->
<script type="module">
  import Search from "/assets/scripts/search/components/Search.js";
  // Load data into our react element from `window.ICON_GALLERY`
  // @TODO move that data generation right into the props here
  ReactDOM.render(
    React.createElement(Search, { data: window.ICON_GALLERY }),
    document.getElementById("root")
  );
</script>

<!-- Browsers that don't support modules, you get a message saying sorry.  -->
<script nomodule>
  var el = document.getElementById("root-loading-placeholder");
  el.innerHTML = "Sorry! This siteâ€™s search functionality is not available on older browsers (like the one you are using).";
</script>